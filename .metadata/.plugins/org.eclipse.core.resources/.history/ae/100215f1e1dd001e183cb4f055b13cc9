package profitcalculationpublisher;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.mtit.databaseconnectionservice.DatabaseConnectionService;

public class ProfitCalculationServiceImpl implements ProfitCalculationServicePublish {

    private DatabaseConnectionService databaseConnectionService;

    @Override
    public void setDatabaseConnectionService(DatabaseConnectionService databaseConnectionService) {
        this.databaseConnectionService = databaseConnectionService;
    }

    @Override
    public void addProfit(int calId, int eventId, double income, double budget, double profit) {

        if (databaseConnectionService == null) {
            System.err.println("DatabaseConnectionService is not set.");
            return;
        }

        Connection connection = databaseConnectionService.getConnection();
        if (connection == null) {
            System.err.println("Database connection is null.");
            return;
        }

        try (PreparedStatement eventStatement = connection.prepareStatement("SELECT id, budget, seat_price, ticket_price FROM events WHERE id = ?")) {
            // Get the event details from the events table based on the provided eventId
            eventStatement.setInt(1, eventId);

            ResultSet eventResult = eventStatement.executeQuery();

            if (eventResult.next()) {
                int actualEventId = eventResult.getInt("id");
                double actualBudget = eventResult.getDouble("budget");
                double ticketPrice = eventResult.getInt("ticket_price");
                double seatprice = eventResult.getInt("seat_price");
                
                
                // Retrieve ticket price and count from SectionTickets table based on eventId
                double seatCount = 0; // Initialize seatCount outside the try block
                double ticketCount = 0; // Initialize ticketCount outside the try block

                try (PreparedStatement ticketStatement = connection.prepareStatement(
                		"SELECT TotalCount, Available, Type FROM TicketCount WHERE eventId = ? GROUP BY Type")) {
                    ticketStatement.setInt(1, actualEventId);
                    ResultSet ticketResult = ticketStatement.executeQuery();

                    while (ticketResult.next()) {
                        double totalCount = ticketResult.getDouble("TotalCount");
                        double available = ticketResult.getInt("Available");
                        String type = ticketResult.getString("Type");

                        // Handle the totalCount and available for each type as needed
                        if ("seat".equals(type)) {
                             seatCount = totalCount - available;
                        } else if ("ticket".equals(type)) {
                             ticketCount = totalCount - available;
                        }
                 
                    }
                } catch (SQLException e) {
                    System.err.println("Error retrieving ticket details: " + e.getMessage());
                    e.printStackTrace();
                }

               
                income = (seatCount * seat_price) + (ticketCount * ticket_price);
          	  	profit = income - budget ;
          	  
                try (PreparedStatement statement = connection.prepareStatement(
                        "INSERT INTO profits (calId, eventId, income, budget, profit) VALUES (?, ?, ?, ?, ?)")) {
                    // Insert the calculated profit along with the actual eventId and budget from the events table
                    statement.setInt(1, calId);
                    statement.setInt(2, actualEventId);
                    statement.setDouble(3, income);
                    statement.setDouble(4, actualBudget);
                    statement.setDouble(5, profit);

                    int rowsInserted = statement.executeUpdate();
                    if (rowsInserted > 0) {
                        System.out.println("Calculate profit successfully.");
                    } else {
                        System.err.println("Failed to calculate profit.");
                    }
                } catch (SQLException e) {
                    System.err.println("Error adding calculated profit to database: " + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                System.err.println("Event with ID " + eventId + " not found.");
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving event details: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
